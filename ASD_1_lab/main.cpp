/* Лаба №1 "Задача о скобках"
   (Задача состоит из двух пунктов, но вы можете не париться и делать сразу второй)
   На вход подаётся строка, состоящая из скобок. Программа должна определить правильность введённого скобочного выражения.
   Савкин сказал, что программа должна работать на русском языке: "Введите строку", "Строка не существует", "Строка существует" и т.п.
   Пункт 1: В строке будут скобки только одного типа: или "()" , или "{}", или "[]"
   Пункт 2: В строке будут все три вида скобок
   Для успешной сдачи лабы оба пункта программа должна выполнять корректно (можно сделать отдельные программы на каждый пункт)
   Пример входа:
   ()[({}())] */

#include <iostream> //Подключаем библиотеку для работы с вводом и выводом
#include <stack> //Подключаем библиотеку для работы со стеком
#include <string> //Подключаем библиотеку для работы со строками

class CheckingBrackets //Cоздаем класс для проверки скобок
        {
private:
    std::stack<char> brackets; //Объявляем стек для хранения скобок
public:
    bool check(std::string str) //Создаём метод для проверки скобок в строке
    {
        for (char bracket : str) //Проходимся по каждому символу в строке
        {
            if (bracket == '(' || bracket == '[' || bracket == '{' || bracket == '<') //Если символ - открывающая скобка,
            {
                brackets.push(bracket); //То добавляем ее в стек
            }
            else if (bracket == ')' || bracket == ']' || bracket == '}' || bracket == '>') //А если символ - закрывающая скобка, проверяем дальше
            {
                if (brackets.empty()) //Если стек пустой, значит нет открывающей скобки для этой закрывающей
                {
                    return false; //Возвращаем false,
                }
                char top = brackets.top(); //Получаем верхний элемент стека
                brackets.pop(); //Удаляем его из стека
                if ((top == '(' && bracket != ')') || (top == '[' && bracket != ']') || (top == '{' && bracket != '}') || (top == '<' && bracket != '>')) //Проверяем, соответствует ли закрывающая скобка соответствующей открывающей
                {
                    return false; //Если не соответствует, возвращаем false
                }
            }
        }
        return brackets.empty(); //Если стек пустой, значит все скобки были закрыты правильно
    }
};

int main()
{
    //setlocale(LC_ALL, "Russian");
    std::string str; //Создаём строку
    std::cout << "Enter your masterpiece line, please." << std::endl;
    std::cin >> str; //Вводим строку
    CheckingBrackets checker; //Создаем объект класса для проверки скобок
    if (checker.check(str)) //Вызываем метод проверки скобок и выводим результат
    {
        std::cout << "The line exists, wow, you're amazing!" << std::endl;
    }
    else
    {
        std::cout << "Oh, the line doesn't exist, that's sad..." << std::endl;
    }
    return 0;
}